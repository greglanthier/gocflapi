# Copyright 2019 Greg Lanthier
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
openapi: 3.0.0
info:
  description: This is an attempt to encode the CFL API using Swagger Spec.
  version: "1.32"
  title: CFL API
  termsOfService: http://api.cfl.ca/docs
  contact:
    email: tech@cfl.ca
  license:
    name: CFL Public Licence
    url: http://api.cfl.ca/key-request/public-licence
tags:
  - name: games
    description: Everything about CFL games
    externalDocs:
      description: Find out more
      url: http://api.cfl.ca/docs#games
paths:
  "/v1/games/{season}":
    get:
      tags:
        - games
      summary: "Get a list of all games in a particular season"
      operationId: getGames
      parameters:
        - name: "season"
          in: "path"
          description: "Season to retrieve"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "Games from seaon"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Games"
      security:
        - api_key:
            []
  "/v1/games/{season}/game/{gameId}{?include}":
    get:
      tags:
        - games
      summary: "Get data for a specific game"
      operationId: getGamesById
      parameters:
        - name: "season"
          in: "path"
          description: "Season to retrieve"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "gameId"
          in: "path"
          description: "Specific game to retrieve"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "include"
          in: "query"
          style: "form"
          explode: false
          description: >
            Additional game data can be optionally accessed through use of the include parameter. To get both the box score and play-by-play data in a single API request, pass both values separated by a comma: include=boxscore,play_by_play
          required: false
          examples:
            one:
              value: "include=boxscore,play_by_play"
              summary: "To get both the box score and play-by-play data in a single API request"
          schema:
            type: "string"
            format: "array"
            enum:
            - "boxscore"
            - "play_by_play"
            - "rosters"
            - "penalties"
            - "play_reviews"
      responses:
        "200":
          description: "Games from seaon"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Game"
      security:
        - api_key:
            []

externalDocs:
  description: Find out more about the CFL API
  url: http://api.cfl.ca/docs
servers:
  - url: https://api.cfl.ca
  - url: http://api.cfl.ca
components:
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "key"
      in: "query"
  schemas:
    Games:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/components/schemas/Game"
    Game:
      type: "object"
      properties:
        game_id:
          type: "integer"
          format: "int32"
        date_start:
          type: "string"
          format: "date-time"
        game_number:
          type: "integer"
          format: "int32"
        week:
          type: "integer"
          format: "int32"
        season:
          type: "integer"
          format: "int32"
        attendance:
          type: "integer"
          format: "int32"
        event_type:
          $ref: "#/components/schemas/EventType"
        event_status:
          $ref: "#/components/schemas/EventStatus"
        venue:
          $ref: "#/components/schemas/Venue"
        weather:
          $ref: "#/components/schemas/Weather"
        coin_toss:
          $ref: "#/components/schemas/CoinToss"
        tickets_url:
          type: "string"
    EventType:
      type: "object"
      properties:
        event_type_id:
          type: "integer"
          format: "int32"
          description: >
            An integer value indicating the type of game played. Possible values
            are:

            0: Preseason

            1: Regular Season

            2: Playoffs

            3: Grey Cup
          enum:
            - 0
            - 1
            - 2
            - 3
        name:
          type: "string"
        title:
          type: "string"
          description: >
            An string value indicating the formal title of the game. Possible
            values can include:

            Blank / No value

            Eastern Semi-Final

            Western Semi-Final

            Eastern Final

            Western Final

            XXXth Grey Cup
    EventStatus:
      type: "object"
      properties:
        event_status_id:
          type: "integer"
          format: "int32"
          description: >
            An integer value indicating the current status of the game. Possible
            values are:

            1: Pre-Game

            2: In-Progress

            4: Final

            9: Cancelled
          enum:
            - 1
            - 2
            - 4
            - 9
        name:
          type: "string"
        is_active:
          type: "boolean"
          description: >
            A Boolean value indicating if play is currently live in this game.
            If play is live at the time of the API request, the value returned
            is true; else it is false.
        quarter:
          type: "integer"
          format: "int32"
          description: >
            If this game is in progress, contains an integer value indicating
            the current quarter of play. Contains null if the game is not in
            play.
        minutes:
          type: "integer"
          format: "int32"
          description: >
            If this game is in progress, contains an integer value indicating
            the last recorded minute value of the game clock. Contains null if
            the game is not in play.
        seconds:
          type: "integer"
          format: "int32"
          description: >
            If this game is in progress, contains an integer value indicating
            the last recorded second value of the game clock. Contains null if
            the game is not in play.
        down:
          type: "integer"
          format: "int32"
          description: >
            If this game is in progress, contains an integer value indicating
            the down of the last recorded play. Contains null if the game is not
            in play.
        yards_to_go:
          type: "integer"
          format: "int32"
          description: >
            If this game is in progress, contains an integer value indicating
            the last recorded number of yards to a first down. Contains null if
            the game is not in play.
    Venue:
      type: "object"
      properties:
        venue_id:
          type: "integer"
          format: "int32"
          description: >
            A unique numeric value assigned to the stadium / venue the game is
            held within.
        name:
          type: "string"
          description: |
            The name of the stadium / venue the game is held within.
    Weather:
      type: "object"
      properties:
        temperature:
          type: "integer"
          format: "int32"
          description: >
            An integer value indicating the temperature taken at the stadium /
            venue the game is held at. Note that this value can be zero or
            negative.
        sky:
          type: "string"
        wind_speed:
          type: "string"
        wind_direction:
          type: "string"
        field_conditions:
          type: "string"
    CoinToss:
      type: "object"
      properties:
        coin_toss_winner:
          type: "string"
        coin_toss_winner_election:
          type: "string"
          description: >
            A free-form string that contains information on the winner of the
            game-starting coin toss, and what the team elected to do.

            The structure of this value is not normalized and as such should be used programmatically with caution.
    ApiResponse:
      type: "object"
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
