// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventStatus event status
// swagger:model EventStatus
type EventStatus struct {

	// If this game is in progress, contains an integer value indicating the down of the last recorded play. Contains null if the game is not in play.
	//
	Down int32 `json:"down,omitempty"`

	// An integer value indicating the current status of the game. Possible values are:
	// 1: Pre-Game
	// 2: In-Progress
	// 4: Final
	// 9: Cancelled
	//
	// Enum: [1 2 4 9]
	EventStatusID int32 `json:"event_status_id,omitempty"`

	// A Boolean value indicating if play is currently live in this game. If play is live at the time of the API request, the value returned is true; else it is false.
	//
	IsActive bool `json:"is_active,omitempty"`

	// If this game is in progress, contains an integer value indicating the last recorded minute value of the game clock. Contains null if the game is not in play.
	//
	Minutes int32 `json:"minutes,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// If this game is in progress, contains an integer value indicating the current quarter of play. Contains null if the game is not in play.
	//
	Quarter int32 `json:"quarter,omitempty"`

	// If this game is in progress, contains an integer value indicating the last recorded second value of the game clock. Contains null if the game is not in play.
	//
	Seconds int32 `json:"seconds,omitempty"`

	// If this game is in progress, contains an integer value indicating the last recorded number of yards to a first down. Contains null if the game is not in play.
	//
	YardsToGo int32 `json:"yards_to_go,omitempty"`
}

// Validate validates this event status
func (m *EventStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventStatusID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var eventStatusTypeEventStatusIDPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[1,2,4,9]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventStatusTypeEventStatusIDPropEnum = append(eventStatusTypeEventStatusIDPropEnum, v)
	}
}

// prop value enum
func (m *EventStatus) validateEventStatusIDEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, eventStatusTypeEventStatusIDPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventStatus) validateEventStatusID(formats strfmt.Registry) error {

	if swag.IsZero(m.EventStatusID) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventStatusIDEnum("event_status_id", "body", m.EventStatusID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventStatus) UnmarshalBinary(b []byte) error {
	var res EventStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
