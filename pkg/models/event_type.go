// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventType event type
// swagger:model EventType
type EventType struct {

	// An integer value indicating the type of game played. Possible values are:
	// 0: Preseason
	// 1: Regular Season
	// 2: Playoffs
	// 3: Grey Cup
	//
	// Enum: [0 1 2 3]
	EventTypeID int32 `json:"event_type_id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// An string value indicating the formal title of the game. Possible values can include:
	// Blank / No value
	// Eastern Semi-Final
	// Western Semi-Final
	// Eastern Final
	// Western Final
	// XXXth Grey Cup
	//
	Title string `json:"title,omitempty"`
}

// Validate validates this event type
func (m *EventType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var eventTypeTypeEventTypeIDPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventTypeTypeEventTypeIDPropEnum = append(eventTypeTypeEventTypeIDPropEnum, v)
	}
}

// prop value enum
func (m *EventType) validateEventTypeIDEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, eventTypeTypeEventTypeIDPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventType) validateEventTypeID(formats strfmt.Registry) error {

	if swag.IsZero(m.EventTypeID) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventTypeIDEnum("event_type_id", "body", m.EventTypeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventType) UnmarshalBinary(b []byte) error {
	var res EventType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
