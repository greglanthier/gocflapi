// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Game game
// swagger:model Game
type Game struct {

	// attendance
	Attendance int32 `json:"attendance,omitempty"`

	// coin toss
	CoinToss *CoinToss `json:"coin_toss,omitempty"`

	// date start
	// Format: date-time
	DateStart strfmt.DateTime `json:"date_start,omitempty"`

	// event status
	EventStatus *EventStatus `json:"event_status,omitempty"`

	// event type
	EventType *EventType `json:"event_type,omitempty"`

	// game id
	GameID int32 `json:"game_id,omitempty"`

	// game number
	GameNumber int32 `json:"game_number,omitempty"`

	// season
	Season int32 `json:"season,omitempty"`

	// tickets url
	TicketsURL string `json:"tickets_url,omitempty"`

	// venue
	Venue *Venue `json:"venue,omitempty"`

	// weather
	Weather *Weather `json:"weather,omitempty"`

	// week
	Week int32 `json:"week,omitempty"`
}

// Validate validates this game
func (m *Game) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoinToss(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVenue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeather(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Game) validateCoinToss(formats strfmt.Registry) error {

	if swag.IsZero(m.CoinToss) { // not required
		return nil
	}

	if m.CoinToss != nil {
		if err := m.CoinToss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coin_toss")
			}
			return err
		}
	}

	return nil
}

func (m *Game) validateDateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.DateStart) { // not required
		return nil
	}

	if err := validate.FormatOf("date_start", "body", "date-time", m.DateStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Game) validateEventStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.EventStatus) { // not required
		return nil
	}

	if m.EventStatus != nil {
		if err := m.EventStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_status")
			}
			return err
		}
	}

	return nil
}

func (m *Game) validateEventType(formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	if m.EventType != nil {
		if err := m.EventType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_type")
			}
			return err
		}
	}

	return nil
}

func (m *Game) validateVenue(formats strfmt.Registry) error {

	if swag.IsZero(m.Venue) { // not required
		return nil
	}

	if m.Venue != nil {
		if err := m.Venue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("venue")
			}
			return err
		}
	}

	return nil
}

func (m *Game) validateWeather(formats strfmt.Registry) error {

	if swag.IsZero(m.Weather) { // not required
		return nil
	}

	if m.Weather != nil {
		if err := m.Weather.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weather")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Game) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Game) UnmarshalBinary(b []byte) error {
	var res Game
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
